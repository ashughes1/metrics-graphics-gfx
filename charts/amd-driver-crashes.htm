<script src='js/addons/mg_line_brushing.js'></script>
<link rel='stylesheet' href='css/addons/mg_line_brushing.css' />

<div class='row trunk-section'>
  <div class='col-lg-7 text-center'>
    <div class='col-lg-12' id='crashes_amd'></div>
    <div class='btn-group btn-group-sm text-center split-by-controls'>
      <button type='button' class='btn btn-default active' data-y_accessor='all'>All</button>
      <button type='button' class='btn btn-default' data-y_accessor='release'>Release</button>
      <button type='button' class='btn btn-default' data-y_accessor='beta'>Beta</button>
      <button type='button' class='btn btn-default' data-y_accessor='aurora'>Aurora</button>
      <button type='button' class='btn btn-default' data-y_accessor='nightly'>Nightly</button>
    </div>
    <div class='legend text-center'></div>
  </div>
</div>

<script>
var globals = {};

var split_by_params = {
  title: "Crashes in AMD driver DLLs",
  width: 1100,
  height: 300,
  right: 40,
  xax_count: 4,
  target: document.getElementById('crashes_amd'),
  x_accessor: 'date',
  missing_is_hidden: true,
  linked: true
};

$('.split-by-controls button').click(function() {
    var new_y_accessor = $(this).data('y_accessor');
    split_by_params.y_accessor = setY(new_y_accessor);
    split_by_params.markers = setMarkers(new_y_accessor);
    split_by_params.legend = setLegend(new_y_accessor);

    // change button state
    $(this).addClass('active').siblings().removeClass('active');

    // update data
    delete split_by_params.xax_format;
    MG.data_graphic(split_by_params);
});

function setLegend(channel) {
  if (channel == "nightly") {
    legend = ['nightly'];
  } else if (channel == "aurora") {
    legend = ['aurora'];
  } else if (channel == "beta") {
    legend = ['beta'];
  } else if (channel == "release") {
    legend = ['release'];
  } else {
    legend = ['nightly', 'aurora', 'beta', 'release'];
  }
  return legend;
}

function setY(channel) {
  if (channel == "nightly") {
    y_accessor = ['nightly'];
  } else if (channel == "aurora") {
    y_accessor = ['aurora'];
  } else if (channel == "beta") {
    y_accessor = ['beta'];
  } else if (channel == "release") {
    y_accessor = ['release'];
  } else {
    y_accessor = ['nightly', 'aurora', 'beta', 'release'];
  }
  return y_accessor;
}

function setMarkers(channel) {
  if (channel == "nightly") {
    markers = [{
      'date': new Date('2016-09-19T00:00:00.000Z'),
      'label': '52.0a1'
    },{
      'date': new Date('2016-08-0100:00:00.000Z'),
      'label': '51.0a1'
    },{
      'date': new Date('2016-06-06T00:00:00.000Z'),
      'label': '50.0a1'
    },{
      'date': new Date('2016-04-25T00:00:00.000Z'),
      'label': '49.0a1'
    },{
      'date': new Date('2016-03-07T00:00:00.000Z'),
      'label': '48.0a1'
    },{
      'date': new Date('2016-01-25T00:00:00.000Z'),
      'label': '47.0a1'
    },{
      'date': new Date('2015-12-14T00:00:00.000Z'),
      'label': '46.0a1'
    },{
      'date': new Date('2015-10-29T00:00:00.000Z'),
      'label': '45.0a1'
    },{
      'date': new Date('2015-09-21T00:00:00.000Z'),
      'label': '44.0a1'
    }, {
      'date': new Date('2015-08-10T00:00:00.000Z'),
      'label': '43.0a1'
    }, {
      'date': new Date('2015-06-29T00:00:00.000Z'),
      'label': '42.0a1'
    }, {
      'date': new Date('2015-05-11T00:00:00.000Z'),
      'label': '41.0a1'
    }];
  } else if (channel == "aurora") {
    markers = [{
      'date': new Date('2016-09-19T00:00:00.000Z'),
      'label': '51.0a2'
    },{
      'date': new Date('2016-08-0100:00:00.000Z'),
      'label': '50.0a2'
    },{
      'date': new Date('2016-06-06T00:00:00.000Z'),
      'label': '49.0a2'
    },{
      'date': new Date('2016-04-25T00:00:00.000Z'),
      'label': '48.0a2'
    },{
      'date': new Date('2016-03-07T00:00:00.000Z'),
      'label': '47.0a2'
    },{
      'date': new Date('2016-01-25T00:00:00.000Z'),
      'label': '46.0a2'
    },{
      'date': new Date('2015-12-14T00:00:00.000Z'),
      'label': '45.0a2'
    },{
      'date': new Date('2015-10-29T00:00:00.000Z'),
      'label': '44.0a2'
    },{
      'date': new Date('2015-09-21T00:00:00.000Z'),
      'label': '43.0a2'
    }, {
      'date': new Date('2015-08-10T00:00:00.000Z'),
      'label': '42.0a2'
    }, {
      'date': new Date('2015-06-29T00:00:00.000Z'),
      'label': '41.0a2'
    }, {
      'date': new Date('2015-05-11T00:00:00.000Z'),
      'label': '40.0a2'
    }];
  } else if (channel == "beta") {
    markers = [{
      'date': new Date('2016-09-19T00:00:00.000Z'),
      'label': '50.0b'
    },{
      'date': new Date('2016-08-0100:00:00.000Z'),
      'label': '49.0b'
    },{
      'date': new Date('2016-06-06T00:00:00.000Z'),
      'label': '48.0b'
    },{
      'date': new Date('2016-04-25T00:00:00.000Z'),
      'label': '47.0b'
    },{
      'date': new Date('2016-03-07T00:00:00.000Z'),
      'label': '46.0b'
    },{
      'date': new Date('2016-01-25T00:00:00.000Z'),
      'label': '45.0b'
    },{
      'date': new Date('2015-12-14T00:00:00.000Z'),
      'label': '44.0b'
    },{
      'date': new Date('2015-10-29T00:00:00.000Z'),
      'label': '43.0b'
    },{
      'date': new Date('2015-09-21T00:00:00.000Z'),
      'label': '42.0b'
    }, {
      'date': new Date('2015-08-10T00:00:00.000Z'),
      'label': '41.0b'
    }, {
      'date': new Date('2015-06-29T00:00:00.000Z'),
      'label': '40.0b'
    }, {
      'date': new Date('2015-05-11T00:00:00.000Z'),
      'label': '39.0b'
    }];
  } else {
    markers = [{
      'date': new Date('2016-09-20T00:00:00.000Z'),
      'label': '49.0'
    },{
      'date': new Date('2016-08-02T00:00:00.000Z'),
      'label': '48.0'
    },{
      'date': new Date('2016-06-07T00:00:00.000Z'),
      'label': '47.0'
    },{
      'date': new Date('2016-04-26T00:00:00.000Z'),
      'label': '46.0'
    },{
      'date': new Date('2016-03-08T00:00:00.000Z'),
      'label': '45.0'
    },{
      'date': new Date('2016-01-26T00:00:00.000Z'),
      'label': '44.0'
    },{
      'date': new Date('2015-12-15T00:00:00.000Z'),
      'label': '43.0'
    },{
      'date': new Date('2015-11-03T00:00:00.000Z'),
      'label': '42.0'
    },{
      'date': new Date('2015-09-22T00:00:00.000Z'),
      'label': '41.0'
    }, {
      'date': new Date('2015-08-11T00:00:00.000Z'),
      'label': '40.0'
    }, {
      'date': new Date('2015-06-30T00:00:00.000Z'),
      'label': '39.0'
    }, {
      'date': new Date('2015-06-02T00:00:00.000Z'),
      'label': '38.0.5'
    }, {
      'date': new Date('2015-05-12T00:00:00.000Z'),
      'label': '38.0'
    }];
  }
  return markers;
}

function convertDate(d) {
    var day = (d.getDate() < 10) ? '0' + d.getDate().toString() : d.getDate().toString();
    var month = ((d.getMonth()+1) < 10) ? '0' + (d.getMonth()+1).toString() : (d.getMonth()+1).toString();
    var year = d.getFullYear().toString();
    return year + '-' + month + '-' + day;
}

function graph() {
    console.log(chart_data);
    var data = MG.convert.date(chart_data, 'date');
    globals.data = data;
    split_by_params.data = data;
    split_by_params.y_accessor = ['release','beta','aurora','nightly'];
    split_by_params.legend = ['Release','Beta','Aurora','Nightly'];
    MG.data_graphic(split_by_params);
}

function loadRemoteData() {
    var start = convertDate(new Date((new Date()).valueOf()-180*24*60*60*1000));
    var url = "https://crash-stats.mozilla.com/api/SuperSearch/?"
         + "product=Firefox"
         + "&signature=^amd&signature=^ati"
         + "&date=%3E%3D" + start
         + "&_histogram.date=release_channel&_histogram_interval=1d";
    d3.json(url, function(data) {
         if (!data) return new Error("Unable to load JSON data!");
         var histogram_date = data.facets.histogram_date;
         for (var i in histogram_date) {
            var item = {
                "date":histogram_date[i].term.substring(0,10),
                "release":0, "beta":0, "aurora":0, "nightly":0
            }
            var facet_channel = histogram_date[i].facets.release_channel;
            for (var j in facet_channel) {
                if (facet_channel[j].term == "release") item.release = facet_channel[j].count;
                if (facet_channel[j].term == "aurora") item.aurora = facet_channel[j].count;
                if (facet_channel[j].term == "beta") item.beta = facet_channel[j].count;
                if (facet_channel[j].term == "nightly") item.nightly = facet_channel[j].count;
            }
            chart_data.push(item);
            if (i >= histogram_date.length-1) graph();
         }
    });
}



var chart_data = [];
d3.json('data/amd-driver.json', function(data) {
    if (!data) return new Error("Unable to load JSON data!");
    for (var i=0; i<data.length; i++) {
        chart_data.push(data[i]);
        if (chart_data.length >= data.length) loadRemoteData();
    }
});
</script>
