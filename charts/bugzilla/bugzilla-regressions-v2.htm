<div class='row trunk-section'>
  <div class='col-lg-12 text-center' id='chart'>LOADING DATA...</div>
</div>

<script>
    MG._hooks = {};
    
    var globals = {};
    
    globals.mouseover = function(d,i) {
        var end_date = convertDate(d.date);
        var start_date = convertDate(new Date(d.date.valueOf()-1*24*60*60*1000));
        globals.url = "https://hg.mozilla.org/releases/mozilla-release/pushloghtml?startdate=" + start_date + "&enddate=" + end_date;
    }
    
    globals.markers = [
        {'date': new Date('2015-12-14T00:00:00.000Z'),'label': '43.0'},
        {'date': new Date('2016-01-25T00:00:00.000Z'),'label': '44.0'},
        {'date': new Date('2016-03-08T00:00:00.000Z'),'label': '45.0'},
        {'date': new Date('2016-04-26T00:00:00.000Z'),'label': '46.0'}
    ];
    
    function convertDate(d) {
        var day = (d.getDate() < 10) ? '0' + d.getDate().toString() : d.getDate().toString();
        var month = ((d.getMonth()+1) < 10) ? '0' + (d.getMonth()+1).toString() : (d.getMonth()+1).toString();
        var year = d.getFullYear().toString();
        return year + '-' + month + '-' + day;
    }
    
    function draw(chart_data) {
        chart_data = MG.convert.date(chart_data, 'date');
        document.getElementById('chart').innerHTML = "";
        MG.data_graphic({
            data: chart_data,
            title: "Graphics Regression Bugs",
            width: 800,
            height: 300,
            left:90,
            right:90,
            target: document.getElementById('chart'),
            x_accessor: "date",
            y_accessor: ["resolved","unresolved"],
            legend: ["Resolved","Unresolved"],
            y_label: "Number of Regressions",
            chart_type: "line",
            linked:true,
            mouseover: globals.mouseover,
            markers:globals.markers
        });
        
        var mouseouts = d3.selectAll('.mg-voronoi path').on('mouseout');
        d3.selectAll('.mg-voronoi path')
            .on('click', function(d) {
                window.open(globals.url, '_blank');
            });
    }
    
    function processGraphicsData(start, end) {
        d3.json("https://crash-stats.mozilla.com/api/SuperSearch/?"
            + "product=Firefox"
            + "&graphics_startup_test=%21__null__" 
            + "&signature=~gfx&signature=~layers&signature=~canvas&signature=~glcontext&signature=~d3d&signature=~d2d&signature=~dwrite&signature=~skia&signature=~mesa&signature=~cairo&signature=^amd&signature=^ati&signature=^igd&signature=^nv"
            + "&date=%3E%3D" + start
            + "&date=%3C%3D" + end
            + "&_histogram.date=release_channel&_histogram_interval=1d", function(data) {
                if (!data) return new Error("Unable to load JSON data!");
                var histogram_date = data.facets.histogram_date;
                for (var d=0; d<histogram_date.length; d++) {
                    var term = histogram_date[d].term.substring(0,10);
                    var count = histogram_date[d].count;
                    chartData.push({"date":term,"gfx":count});
                    console.log(chartData.length, histogram_date.length);
                }
                if (chartData.length >= histogram_date.length) {
                    processAllData(start, end);    
                }
        });
    }
    
    function processAllData(start, end) {
        d3.json("https://crash-stats.mozilla.com/api/SuperSearch/?"
            + "product=Firefox"
            + "&graphics_startup_test=%21__null__" 
            + "&date=%3E%3D" + start
            + "&date=%3C%3D" + end
            + "&_histogram.date=release_channel&_histogram_interval=1d", function(data) {
                if (!data) return new Error("Unable to load JSON data!");
                var processed = 0;
                var histogram_date = data.facets.histogram_date;
                for (var d=0; d<histogram_date.length; d++) {
                    var term = histogram_date[d].term.substring(0,10);
                    var count = histogram_date[d].count;
                    for (var i=0; i<chartData.length; i++) {
                        if (chartData[i].date == term) {
                            chartData[i]['all'] = count;
                            chartData[i]['percent'] = chartData[i].gfx / count * 100;
                            processed = processed + 1;
                        }
                    }                    
                }
                if (processed >= chartData.length) {
                    draw();    
                }
        });
    }
    
    function initialize(days) {
        var result = [];
        for (var i=days; i>0; i--) {
            result.push({"date":convertDate(new Date((new Date()).valueOf()-i*24*60*60*1000)),"resolved":0,"unresolved":0});
        }
        return result;
    }
    
    function process(data) {
        var result = [];
        
        $.each(chart_data, function(index_chart,object_chart) {
            var chart_date = new Date(object_chart.date);
            $.each(data, function(index_data, object_data) {
                var creation_date = new Date(object_data.creation_time.substring(0,10));
                var resolved_date = (object_data.cf_last_resolved) ? new Date(object_data.cf_last_resolved.substring(0,10)) : null;
                // Bug was open on or before the day
                if ((chart_date - creation_date) >= 0) {
                    // Bug was resolved on or before the day
                    if (resolved_date && (resolved_date - chart_date) <= 0) {
                        chart_data[index_chart].resolved += 1;
                    // Bug was unresolved on or before the day
                    } else {
                        chart_data[index_chart].unresolved += 1;
                    }
                }
                if (index_data >= data.length-1 && index_chart >= chart_data.length-1) {
                    draw(chart_data);
                }
            });
            
        });
    }
        
    var endDate = convertDate(new Date((new Date()).valueOf()-1*24*60*60*1000));
    var date_start = convertDate(new Date((new Date()).valueOf()-730*24*60*60*1000));
    var query = "https://bugzilla.mozilla.org/rest/bug?product=Core&component=Canvas%3A 2D&component=Canvas%3A WebGL&component=GFX%3A Color Management&component=Graphics&component=Graphics%3A Layers&component=Graphics%3A Text&component=ImageLib&component=Panning and Zooming&keywords=regression&creation_time=" + date_start + "&include_fields=id,resolution,creation_time,cf_last_resolved";
    var chart_data = initialize(730);
    var bz_data = [];
    d3.json(query, function(data) {
        if (!data) return new Error("Unable to load JSON data!");
        if (Object.keys(data) == "bugs") {
            process(data.bugs);
        }
        
    });
    
    //processGraphicsData(startDate, endDate);
    
</script>
